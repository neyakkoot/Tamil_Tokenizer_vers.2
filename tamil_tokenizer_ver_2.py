# -*- coding: utf-8 -*-
"""Tamil_Tokenizer_ver.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19gcVdJ_USefbXA6PZjR4-1D4RUXLplvr
"""

pip install Open-Tamil

import tamil
from tamil.utf8 import get_letters, get_words
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from collections import Counter
from pathlib import Path
import re
from typing import List, Dict, Tuple, Optional, Union
import numpy as np

class AdvancedTamilAnalyzer:
    def __init__(self):
        """தமிழ் உரை பகுப்பாய்வி துவக்கம்"""
        # அடிப்படை தமிழ் எழுத்துகளை ஏற்றுதல்
        self.tamil_letters = tamil.utf8.tamil_letters
        self.uyir_letters = tamil.utf8.uyir_letters
        self.mei_letters = tamil.utf8.mei_letters
        self.uyirmei_letters = tamil.utf8.uyirmei_letters
        self.agaram_letters = tamil.utf8.agaram_letters

    def load_text(self, source: Union[str, Path], source_type: str = 'file', column_name: str = None) -> str:
        """
        பல்வேறு மூலங்களிலிருந்து உரையை ஏற்றுதல்
        """
        try:
            if source_type == 'file':
                with open(source, 'r', encoding='utf-8') as f:
                    return f.read()
            elif source_type == 'csv':
                df = pd.read_csv(source, encoding='utf-8')
                return '\n'.join(df[column_name].astype(str).tolist())
            else:  # text
                return source
        except Exception as e:
            print(f"உரை ஏற்றுவதில் பிழை: {str(e)}")
            return ""

    def detailed_analysis(self, text: str) -> Dict:
        """
        விரிவான உரை பகுப்பாய்வு
        """
        # அடிப்படை பகுப்பாய்வு
        words = get_words(text)
        letters = get_letters(text)

        # தமிழ் எழுத்துகளை மட்டும் பிரித்தெடுத்தல்
        tamil_letters = [letter for letter in letters if tamil.utf8.istamil(letter)]

        # எழுத்து வகை பகுப்பாய்வு
        letter_types = {
            'உயிர்': sum(1 for char in tamil_letters if char in self.uyir_letters),
            'மெய்': sum(1 for char in tamil_letters if char in self.mei_letters),
            'உயிர்மெய்': sum(1 for char in tamil_letters if char in self.uyirmei_letters),
            'அகரம்': sum(1 for char in tamil_letters if char in self.agaram_letters)
        }

        # சொல் பகுப்பாய்வு
        tamil_words = [word for word in words if tamil.utf8.istamil_prefix(word)]
        word_lengths = [len(get_letters(word)) for word in tamil_words]

        # சொற்களின் அதிர்வெண்
        word_freq = Counter(tamil_words)
        top_words = dict(word_freq.most_common(10))

        # எழுத்துகளின் அதிர்வெண்
        char_freq = Counter(tamil_letters)
        top_chars = dict(char_freq.most_common(10))

        return {
            'அடிப்படை_தகவல்': {
                'மொத்த_சொற்கள்': len(tamil_words),
                'தனித்த_சொற்கள்': len(set(tamil_words)),
                'மொத்த_எழுத்துகள்': len(tamil_letters),
                'தனித்த_எழுத்துகள்': len(set(tamil_letters)),
                'சராசரி_சொல்_நீளம்': np.mean(word_lengths) if word_lengths else 0,
                'பெரிய_சொல்': max(tamil_words, key=len) if tamil_words else "",
                'சிறிய_சொல்': min(tamil_words, key=len) if tamil_words else ""
            },
            'எழுத்து_வகைகள்': letter_types,
            'அதிக_பயன்பாட்டு_சொற்கள்': top_words,
            'அதிக_பயன்பாட்டு_எழுத்துகள்': top_chars
        }

    def generate_visualizations(self, analysis_results: Dict, output_dir: str = None):
        """
        பகுப்பாய்வு முடிவுகளுக்கான ஊடாடும் காட்சிப்படுத்தல்கள்
        """
        # உள்ளீடு சரிபார்ப்பு
        if not analysis_results:
            return None

        # 1. சொல் அதிர்வெண் வரைபடம்
        word_freq_data = pd.DataFrame({
            'சொற்கள்': list(analysis_results['அதிக_பயன்பாட்டு_சொற்கள்'].keys()),
            'அதிர்வெண்': list(analysis_results['அதிக_பயன்பாட்டு_சொற்கள்'].values())
        })
        word_freq_fig = px.bar(
            word_freq_data,
            x='சொற்கள்',
            y='அதிர்வெண்',
            title='அதிக பயன்பாட்டிலுள்ள சொற்கள்'
        )

        # 2. எழுத்து வகை பை வரைபடம்
        letter_types_fig = px.pie(
            values=list(analysis_results['எழுத்து_வகைகள்'].values()),
            names=list(analysis_results['எழுத்து_வகைகள்'].keys()),
            title='எழுத்து வகைகள் விநியோகம்'
        )

        # 3. எழுத்து அதிர்வெண் வரைபடம்
        char_freq_data = pd.DataFrame({
            'எழுத்துகள்': list(analysis_results['அதிக_பயன்பாட்டு_எழுத்துகள்'].keys()),
            'அதிர்வெண்': list(analysis_results['அதிக_பயன்பாட்டு_எழுத்துகள்'].values())
        })
        char_freq_fig = px.bar(
            char_freq_data,
            x='எழுத்துகள்',
            y='அதிர்வெண்',
            title='அதிக பயன்பாட்டிலுள்ள எழுத்துகள்'
        )

        # தொகுக்கப்பட்ட காட்சி
        dashboard = make_subplots(
            rows=2, cols=2,
            specs=[
                [{"type": "xy"}, {"type": "domain"}],
                [{"type": "xy"}, None]
            ],
            subplot_titles=(
                'அதிக பயன்பாட்டிலுள்ள சொற்கள்',
                'எழுத்து வகைகள் விநியோகம்',
                'அதிக பயன்பாட்டிலுள்ள எழுத்துகள்'
            )
        )

        # Add traces to dashboard
        for trace in word_freq_fig.data:
            dashboard.add_trace(trace, row=1, col=1)
        for trace in letter_types_fig.data:
            dashboard.add_trace(trace, row=1, col=2)
        for trace in char_freq_fig.data:
            dashboard.add_trace(trace, row=2, col=1)

        # Update layout
        dashboard.update_layout(
            height=800,
            width=1200,
            showlegend=True,
            title_text="தமிழ் உரை பகுப்பாய்வு முடிவுகள்"
        )

        # Save visualizations if output directory is specified
        if output_dir:
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            word_freq_fig.write_html(str(Path(output_dir) / 'word_frequency.html'))
            letter_types_fig.write_html(str(Path(output_dir) / 'letter_types.html'))
            char_freq_fig.write_html(str(Path(output_dir) / 'char_frequency.html'))
            dashboard.write_html(str(Path(output_dir) / 'dashboard.html'))

        return {
            'word_frequency': word_freq_fig,
            'letter_types': letter_types_fig,
            'char_frequency': char_freq_fig,
            'dashboard': dashboard
        }

    def save_results(self, results: Dict, output_file: str):
        """பகுப்பாய்வு முடிவுகளை JSON வடிவில் சேமித்தல்"""
        try:
            # Convert results to JSON-serializable format
            serializable_results = {
                'அடிப்படை_தகவல்': results['அடிப்படை_தகவல்'],
                'எழுத்து_வகைகள்': results['எழுத்து_வகைகள்'],
                'அதிக_பயன்பாட்டு_சொற்கள்': dict(results['அதிக_பயன்பாட்டு_சொற்கள்']),
                'அதிக_பயன்பாட்டு_எழுத்துகள்': dict(results['அதிக_பயன்பாட்டு_எழுத்துகள்'])
            }

            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(serializable_results, f, ensure_ascii=False, indent=2)

            print(f"முடிவுகள் {output_file} கோப்பில் சேமிக்கப்பட்டன")
        except Exception as e:
            print(f"முடிவுகளை சேமிக்கும் போது பிழை: {str(e)}")

def main():
    """எடுத்துக்காட்டு பயன்பாடு"""
    # பகுப்பாய்வாளரை உருவாக்குதல்
    analyzer = AdvancedTamilAnalyzer()

    # சோதனை உரை
    test_text = """
    தமிழ் இலக்கியம் தொன்மையானது. சங்க இலக்கியம், பக்தி இலக்கியம், காப்பிய இலக்கியம் என
    பல்வேறு வகைகள் உண்டு. தமிழ் மொழி திராவிட மொழிக் குடும்பத்தைச் சேர்ந்தது.
    தமிழ் மொழியில் ஏராளமான இலக்கிய வளம் உள்ளது.
    """

    # பகுப்பாய்வு செய்தல்
    results = analyzer.detailed_analysis(test_text)

    # காட்சிப்படுத்தல்களை உருவாக்குதல்
    visualizations = analyzer.generate_visualizations(
        results,
        output_dir='analysis_output'
    )

    # முடிவுகளை சேமித்தல்
    analyzer.save_results(results, 'analysis_results.json')
    analyzer.save_results(results, 'analysis_results.')

if __name__ == "__main__":
    main()